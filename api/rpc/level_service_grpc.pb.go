// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: level_service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LevelServiceClient is the client API for LevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LevelServiceClient interface {
	CreateLevel(ctx context.Context, in *CreateLevelRequest, opts ...grpc.CallOption) (*CreateLevelResponse, error)
}

type levelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelServiceClient(cc grpc.ClientConnInterface) LevelServiceClient {
	return &levelServiceClient{cc}
}

func (c *levelServiceClient) CreateLevel(ctx context.Context, in *CreateLevelRequest, opts ...grpc.CallOption) (*CreateLevelResponse, error) {
	out := new(CreateLevelResponse)
	err := c.cc.Invoke(ctx, "/LevelService/CreateLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelServiceServer is the server API for LevelService service.
// All implementations must embed UnimplementedLevelServiceServer
// for forward compatibility
type LevelServiceServer interface {
	CreateLevel(context.Context, *CreateLevelRequest) (*CreateLevelResponse, error)
	mustEmbedUnimplementedLevelServiceServer()
}

// UnimplementedLevelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLevelServiceServer struct {
}

func (UnimplementedLevelServiceServer) CreateLevel(context.Context, *CreateLevelRequest) (*CreateLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLevel not implemented")
}
func (UnimplementedLevelServiceServer) mustEmbedUnimplementedLevelServiceServer() {}

// UnsafeLevelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LevelServiceServer will
// result in compilation errors.
type UnsafeLevelServiceServer interface {
	mustEmbedUnimplementedLevelServiceServer()
}

func RegisterLevelServiceServer(s grpc.ServiceRegistrar, srv LevelServiceServer) {
	s.RegisterService(&LevelService_ServiceDesc, srv)
}

func _LevelService_CreateLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).CreateLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LevelService/CreateLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).CreateLevel(ctx, req.(*CreateLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LevelService_ServiceDesc is the grpc.ServiceDesc for LevelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LevelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LevelService",
	HandlerType: (*LevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLevel",
			Handler:    _LevelService_CreateLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "level_service.proto",
}
